#!/usr/bin/env python
#
# dns_compare.py - Compare the data in a BIND zone file to the data being returned
#                  by an authoritative DNS server.
#
# Purpose:
#   Use this tool to verify the data being returned by an authoritative DNS server
#   matches the data in a zone file.
#
# Use case:
#   This is useful, for example, when you are migrating from one DNS server to another and
#   need to verify that all the records imported correctly.
#
#   In my case, I used this tool to help me during a migration of multiple domains from
#   Windows 2000 DNS and GoDaddy DNS (which can both export BIND zone files) into Amazon's
#   Route53 DNS service.  With this tool, I could confidently prove that all records
#   properly imported into Route53.
#
# Example usage:
#       $ dns_compare.py -z example.com --file example.com.zone --server 10.1.1.1
#       ....X...X..done
#       Results:
#       9 passed / 2 fail
#
#   NOTE: use -v to get a very verbose view of each dns record as it is checked
#
# Author:
#   joe miller, <joeym@joeym.net>, 12/16/2010, main author
#   puggan sundragon, <puggan@spiro.se>, 2018-03-27, upgrades
#

from optparse import OptionParser

import sys, socket

try:
    import dns.resolver, dns.zone
    from dns.exception import DNSException
    from dns.rdataclass import *
    from dns.rdatatype import *
except ImportError:
    print("Please install dnspython:")
    print("$ sudo pip install dnspython")
    sys.exit(1)


if __name__ == '__main__':
    parser = OptionParser()
    # required options
    parser.add_option("-z", "--zone", dest="zone", metavar="DOMAIN",
                        help="name of the domain we're checking (eg: domain.com)")
    parser.add_option("-f", "--file", dest="zonefile", metavar="FILE",
                        help="zone file to load records from")
    parser.add_option("-s", "--server", dest="nameserver", metavar="HOST", default="8.8.8.8",
                        help="DNS server to compare zone file against, default google DNS 8.8.8.8")
    # optional ... options
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,
                        help="print detailed results of each action")
    parser.add_option("-a","--soa", dest="compare_soa", action="store_true", default=False,
                        help="compare SOA records (default: false)")
    parser.add_option("-n","--ns", dest="compare_ns", action="store_true", default=False,
                        help="compare NS records (default: false)")
    parser.add_option("-t","--ttl", dest="compare_ttl", action="store_true", default=False,
                        help="compare TTL values (default: false)")
    parser.add_option("-c","--cname", dest="lookup_cnames", action="store_true", default=False,
                        help="lookup cname-values that do not match (default: false)")
    (opts, remaining_args) = parser.parse_args()

    # check for required options, since optparse doesn't support required options
    if opts.zone == None or opts.zonefile == None or opts.nameserver == None:
        print("Error: required arguments: --zone, --file (or --help)")
        sys.exit(2)

    z = dns.zone.from_file(opts.zonefile, origin=opts.zone, relativize=False)

    r = dns.resolver.Resolver(configure=False)
    try:
        r.nameservers = socket.gethostbyname_ex(opts.nameserver)[2]
    except socket.error:
        print("Error: could not resolve 'host' %s" % opts.nameserver)
        sys.exit(3)

    matches = 0
    cnamematches = 0
    mismatches = 0
    errors = 0
    for (name, rdataset) in z.iterate_rdatasets():
        if rdataset.rdtype == SOA and not opts.compare_soa:
            continue
        if rdataset.rdtype == NS and not opts.compare_ns:
            continue

        match = False
        error = False
        result = None
        try:
            ans = r.query(name, rdataset.rdtype, rdataset.rdclass)
            result = ans.rrset.to_rdataset()
            if result == rdataset:
                if opts.compare_ttl:
                    if result.ttl == rdataset.ttl:
                        match = True
                else:
                    match = True
        except DNSException as e:
            pass

        if opts.lookup_cnames and match == False and result == None and rdataset.rdtype == dns.rdatatype.CNAME and rdataset.rdclass == dns.rdataclass.IN:
            try:
                ans_a = r.query(name, dns.rdatatype.A, dns.rdataclass.IN)
            except DNSException as exc:
                error = exc
            else:
                result_a = ans_a.rrset.to_rdataset()
                if ans_a != None:
                    try:
                        ans_cname = r.query(rdataset[0].target, dns.rdatatype.A, dns.rdataclass.IN)
                    except DNSException as exc:
                        error = exc
                    else:
                        result_cname = ans_cname.rrset.to_rdataset()
                        print("----")
                        if result_cname == result_a:
                            print("(%s) query: %s" % ("CName-Match", name))
                            cnamematches += 1
                        else:
                            print("(%s) query: %s" % ("MIS-Match", name))
                            mismatches += 1
                        print("Expected: " + str(rdataset) + ' (' + result_cname + ')')
                        print("Received: " + str(result_a))

        if opts.verbose:
            description = 'Match' if match else 'MIS-MATCH'
            print("----")
            print("(%s) query: %s" % (description, name))
            if result != None and len(result) > 1:
                print("Expected:")
                print(rdataset)
                print("Received: ")
                print(result)
            else:
                print("Expected: " + str(rdataset))
                print("Received: " + str(result))

        if match:
            if not opts.verbose:
                sys.stdout.write('.')
                sys.stdout.flush()
            matches += 1
        elif error:
            if not opts.verbose:
                sys.stdout.write('E')
                print("\n(ERROR) query: %s" % name)
                print("Expected:")
                print(rdataset)
                print("Error: ")
                print(error)
                sys.stdout.flush()
            errors += 1
        else:
            if not opts.verbose:
                sys.stdout.write('X')
                print("\n(MIS-MATCH) query: %s" % name)
                if result != None and len(result) > 1:
                    print("Expected:")
                    print(rdataset)
                    print("Received: ")
                    print(result)
                else:
                    print("Expected: " + str(rdataset))
                    print("Received: " + str(result))
                sys.stdout.flush()
            mismatches += 1
    print("done")

    print("\nResults:")
    print("Matches:       " + str(matches))
    if opts.lookup_cnames and cnamematches > 0:
        print("CName-matches: " + cnamematches)
    print("Mis-matches:   " + str(mismatches))
    print("Errors:        " + str(errors))
